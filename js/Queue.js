'use strict'

// РЕАЛИЗАЦИЯ ОЧЕРЕДИ

class Queue {
  constructor(...args) {
    this._head = 0; // устанавливает индекс головы в 0
    this._tail = 0; // устанавливает индекс хвоста в 0 (тот кто прийдёт в очередь)

    for (const arg of args) {
      //цикл для перебора списка елементв
      this.push(arg); // на кажной итерации цикла добавляем итерируемый элемент в очередь
    }
  }

  // геттер возвращающий размер очереди
  get size() {
    return this._tail - this._head; // получаем размер очереди, вычитая индекс хвоста от индекса головы
  }

  // метод для добавления элемента в очередь
  push(value) { //передаем в метод элемент
    this[this._tail] = value; // в очередь с индекса хвоста приснаимаем значение добавляемого элемента
    this._tail++; // увеличиваем индекс хвоста

    return this.size; // возвращаем размер очереди
  }

  // мотод для удаления элемента из очереди
  shift() {
    const firstValue = this[this._head]; // получаем значение первого элемента относительно очереди с индексом головы
    delete this[this._head]; // удаляем первый элемент очереди относительно очереди с индексом головы
    this._head++; // увеличиваем индес головы

    return firstValue; // возвращаем значение удаленного элемента из очереди
  }
}

const queue = new Queue();
console.log(queue);